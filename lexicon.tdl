;;; -*- Mode: TDL; Coding: utf-8 -*-
;;; Nouns

dog := common_noun-noun-lex &
  [ STEM < "dog" >,
    SYNSEM.LKEYS.KEYREL.PRED "_dog_n_1_rel" ].

cat := common_noun-noun-lex &
  [ STEM < "cat" >,
    SYNSEM.LKEYS.KEYREL.PRED "_cat_n_1_rel" ].

glass := mass_noun-noun-lex &
  [ STEM < "glass" >,
    SYNSEM.LKEYS.KEYREL.PRED "_glass_n_1_rel" ].

thing := common_noun-noun-lex &
  [ STEM < "thing" >,
    SYNSEM.LKEYS.KEYREL.PRED "_thing_n_1_rel" ].

tree := common_noun-noun-lex &
  [ STEM < "tree" >,
    SYNSEM.LKEYS.KEYREL.PRED "_tree_n_1_rel" ].

ant := common_noun-noun-lex &
  [ STEM < "ant" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ant_n_1_rel" ].

I := 1sg_nom-noun-lex &
  [ STEM < "I" >,
    SYNSEM.LKEYS.KEYREL.PRED "_I_n_1_rel" ].

he := 3sg_nom-noun-lex &
  [ STEM < "he" >,
    SYNSEM.LKEYS.KEYREL.PRED "_he_n_1_rel" ].

she := 3sg_nom-noun-lex &
  [ STEM < "she" >,
    SYNSEM.LKEYS.KEYREL.PRED "_she_n_1_rel" ].

they := 3pl_nom-noun-lex &
  [ STEM < "they" >,
    SYNSEM.LKEYS.KEYREL.PRED "_they_n_1_rel" ].

we := 1pl_nom-noun-lex &
  [ STEM < "we" >,
    SYNSEM.LKEYS.KEYREL.PRED "_we_n_1_rel" ].

it := it-noun-lex &
  [ STEM < "it" >,
    SYNSEM.LKEYS.KEYREL.PRED "_it_n_1_rel" ].

you := you-noun-lex &
  [ STEM < "you" >,
    SYNSEM.LKEYS.KEYREL.PRED "_you_n_1_rel" ].

me := 1sg_acc-noun-lex &
  [ STEM < "me" >,
    SYNSEM.LKEYS.KEYREL.PRED "_me_n_1_rel" ].

us := 1pl_acc-noun-lex &
  [ STEM < "us" >,
    SYNSEM.LKEYS.KEYREL.PRED "_us_n_1_rel" ].

him := 3sg_acc-noun-lex &
  [ STEM < "him" >,
    SYNSEM.LKEYS.KEYREL.PRED "_him_n_1_rel" ].

her := 3sg_acc-noun-lex &
  [ STEM < "her" >,
    SYNSEM.LKEYS.KEYREL.PRED "_her_n_1_rel" ].

there_n := loc_noun-noun-lex &
  [ STEM < "there" >,
    SYNSEM.LKEYS.KEYREL.PRED "_there_n_rel" ].

;;;everybody :=

;;; Adjectives

big_attr := adj1-adj-lex &
  [ STEM < "big" >,
    SYNSEM.LKEYS.KEYREL.PRED "_big_a_rel" ].

big_pred := pred-adj-lex &
  [ STEM < "big" >,
    SYNSEM.LKEYS.KEYREL.PRED "_big_a_rel" ].

happy_attr := adj1-adj-lex &
  [ STEM < "happy" >,
    SYNSEM.LKEYS.KEYREL.PRED "_happy_a_rel" ].

happy_pred := pred-adj-lex &
  [ STEM < "happy" >,
    SYNSEM.LKEYS.KEYREL.PRED "_happy_a_rel" ].

cute_attr := adj1-adj-lex &
  [ STEM < "cute" >,
    SYNSEM.LKEYS.KEYREL.PRED "_cute_a_rel" ].

cute_pred := pred-adj-lex &
  [ STEM < "cute" >,
    SYNSEM.LKEYS.KEYREL.PRED "_cute_a_rel" ].

white_attr := adj1-adj-lex &
  [ STEM < "white" >,
    SYNSEM.LKEYS.KEYREL.PRED "_white_a_rel" ].

white_pred := pred-adj-lex &
  [ STEM < "white" >,
    SYNSEM.LKEYS.KEYREL.PRED "_white_a_rel" ].

;;; Verbs

want := gentr_verb-verb-lex &
  [ STEM < "want" >,
    SYNSEM.LKEYS.KEYREL.PRED "_want_v_rel" ].

got_v := nom-acc-transitive-verb-lex  &
  [ STEM < "got" >,
    SYNSEM.LKEYS.KEYREL.PRED "_have_v_rel" ].

tekan := gentr_verb-verb-lex &
  [ STEM < "tekan" >,
    SYNSEM.LKEYS.KEYREL.PRED "_bully_v_rel" ].

kacau := gentr_verb-verb-lex &
  [ STEM < "kacau" >,
    SYNSEM.LKEYS.KEYREL.PRED "_disturb_v_rel" ].

chase := gentr_verb-verb-lex &
  [ STEM < "chase" >,
    SYNSEM.LKEYS.KEYREL.PRED "_chase_v_rel" ].

eat := gentr_verb-verb-lex &
  [ STEM < "eat" >,
    SYNSEM.LKEYS.KEYREL.PRED "_eat_v_rel" ].

hurt := gentr_verb-verb-lex &
  [ STEM < "hurt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hurt_v_rel" ].

give := ditransitive_verb-verb-lex &
  [ STEM < "give" >,
    SYNSEM.LKEYS.KEYREL.PRED "_give_v_rel" ].

think_clause := decl_comp-verb-lex &
  [ STEM < "think" >,
    SYNSEM.LKEYS.KEYREL.PRED "_think_v_2_rel" ].

know_clause := decl_comp-verb-lex &
  [ STEM < "know" >,
    SYNSEM.LKEYS.KEYREL.PRED "_know_v_2_rel" ].

ask_tr-clause := int_tr-comp-verb-lex &
  [ STEM < "ask" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ask_v_rel" ].

ask_ditr-clause := int_ditr-comp-verb-lex &
  [ STEM < "ask" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ask_v_rel" ].

sleep := nom-intransitive-verb-lex &
"""
6/4/2020
changed supertype from intransitive_verb-verb-lex to nom-intransitive-verb-lex
so that constructions like 'me sleep' is not allowed
same for 'think_intr' and 'sing'
"""
  [ STEM < "sleep" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sleep_v_rel" ].

sing := nom-intransitive-verb-lex &
  [ STEM < "sing" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sing_v_rel" ].

know_intr := nom-intransitive-verb-lex &
  [ STEM < "know" >,
    SYNSEM.LKEYS.KEYREL.PRED "_know_v_1_rel" ].

think_intr := nom-intransitive-verb-lex &
  [ STEM < "think" >,
    SYNSEM.LKEYS.KEYREL.PRED "_think_v_1_rel" ].

;;; Auxiliaries

will := will-aux-lex &
  [ STEM < "will" >,
    SYNSEM.LKEYS.KEYREL.PRED "_will_v_rel" ].

does := does_subj-raise-aux-no-pred &
  [ STEM < "does" >,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM singular,
                                                                PER 3rd ] ].
can := will-aux-lex &
  [ STEM < "can" >,
    SYNSEM.LKEYS.KEYREL.PRED "_can_v_rel" ].

is_aux := prp_subj-raise-aux-no-pred &
  [ STEM < "is" >,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM singular,
                                                                PER 3rd ] ].
are_aux := prp_subj-raise-aux-no-pred &
  [ STEM < "are" >,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM plural ].

am_aux := prp_subj-raise-aux-no-pred &
  [ STEM < "am" >,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM singular,
                                                                PER 1st ] ].

want_aux := want-aux-lex &
  [ STEM < "want" >,
    SYNSEM.LKEYS.KEYREL.PRED "_want_v_rel" ].

;to was created just for "want"
to := to-infinitive-lex &
  [ STEM < "to" > ].

;;; Copulas

is_cop := be-cop-lex &
  [ STEM < "is" >,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM singular,
                                                                PER 3rd ] ].

are_cop := be-cop-lex &
  [ STEM < "are" >,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM plural ].

am_cop := be-cop-lex &
  [ STEM < "am" >,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM singular,
                                                                PER 1st ] ].

;;; Determiners and their nouns


a := singular-determiner-lex &
  [ STEM < "a" >,
    SYNSEM.LKEYS.KEYREL.PRED "_a_q_rel" ].

the := definite-determiner-lex &
  [ STEM < "the" >,
    SYNSEM.LKEYS.KEYREL.PRED _exist_q_rel ].

those_q := plural-determiner-lex &
  [ STEM < "those" >,
    SYNSEM.LKEYS.KEYREL.PRED "_those_q_rel" ].

those_n := pl_n+det-lex &
  [ STEM < "those" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_those_q_rel",
    SYNSEM.LKEYS.KEYREL.PRED "_thing_n_1_rel"].

these_q := plural-determiner-lex &
  [ STEM < "these" >,
    SYNSEM.LKEYS.KEYREL.PRED "_these_q_rel" ].

these_n := pl_n+det-lex &
  [ STEM < "these" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_these_q_rel",
    SYNSEM.LKEYS.KEYREL.PRED "_thing_n_1_rel"].

this_q := singular-determiner-lex &
  [ STEM < "this" >,
    SYNSEM.LKEYS.KEYREL.PRED "_this_q_rel" ].

this_n := sg_n+det-lex &
  [ STEM < "this" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_this_q_rel",
    SYNSEM.LKEYS.KEYREL.PRED "_thing_n_1_rel"].

that_q := singular-determiner-lex &
  [ STEM < "that" >,
    SYNSEM.LKEYS.KEYREL.PRED "_that_q_rel" ].

that_n := sg_n+det-lex &
  [ STEM < "that" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_that_q_rel",
    SYNSEM.LKEYS.KEYREL.PRED "_thing_n_1_rel"].

everything_n := sg_n+det-lex &
  [ STEM < "everything" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_every_q_rel",
    SYNSEM.LKEYS.KEYREL.PRED "_thing_n_1_rel" ].

every_q := singular-determiner-lex &
  [ STEM < "every" >,
    SYNSEM.LKEYS.KEYREL.PRED "_every_q_rel"].

;;; Adverbs

never := never_neg-adv-lex &
  [ STEM < "never" >,
    SYNSEM.LKEYS.KEYREL.PRED "neg_rel" ].

not := not_neg-adv-lex &
  [ STEM < "not" >,
    SYNSEM.LKEYS.KEYREL.PRED "neg_rel" ].

already := aspect-adv-lex &
  [ STEM < "already" >,
    SYNSEM.LKEYS.KEYREL.PRED "already_rel" ].

agak := agak-adv-lex &
  [ STEM < "agak" >,
    SYNSEM.LKEYS.KEYREL.PRED "roughly_rel" ].

and1 := conj-lex &
  [ STEM < "and" >,
    SYNSEM.LKEYS.KEYREL.PRED "_and_coord_rel",
    CFORM "1" ].

and2 := conj-lex &
  [ STEM < "and" >,
    SYNSEM.LKEYS.KEYREL.PRED "_and_coord_rel",
    CFORM "2" ].

;;; Complementizers

is%20it := qpart-lex-item &
  [ STEM < "is",
           "it" > ].

that_comp := decl_comps-complementizer-lex-item &
  [ STEM <"that"> ].

if_comp := int_comps-complementizer-lex-item &
  [ STEM < "if" > ]. 
