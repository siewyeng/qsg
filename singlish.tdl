;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Singlish
;;; created at:
;;;     Thu Mar 19 01:28:10 UTC 2020
;;; based on Matrix customization system version of:
;;;     Fri May 10 21:15:28 UTC 2019
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

head :+ [ PRON bool,
    AUX bool,
    PRD bool,
    FORM form,
    INIT bool,
    LOC bool ].
; 14/4/2020 added in INIT but it does not do anything
; 18/4/2020 added in LOC to distiguish the Singlish "here" and "there" from other nouns

noun :+ [ CASE case ].

png :+ [ PER person,
    NUM number,
    COUNT bool ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; For the analysis of inverted yes-no questions, we add the feature INV.

verb :+ [ INV bool ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
nom := case.  ; nominative
acc := case.  ; accusative

;;; Person

person := *top*.
1st := person.
2nd := person.
3rd := person.

;;; Number

number := *top*.
singular := number.
plural := number.

;;; Form

form := *top*.
nonfinite := form.
finite := form.
base := nonfinite.
toinf := nonfinite.
prp := finite.
underspec := finite.
3sg := underspec.
non_3sg := underspec.

;participle -ed, -ing
.

;;; Tense

nonpast := tense.
past := tense.

;;; Aspect

perfective := aspect.
experiential := aspect.
no_aspect := aspect.



exist_q_super_rel := predsort.
exist_q_rel := exist_q_super_rel.
_exist_q_rel := exist_q_super_rel.


;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < #spr &
                                 [ LOCAL.CAT.HEAD det ] >,
                           COMPS < >,
                           SUBJ < >,
                           SPEC < > ],
    ARG-ST < #spr > ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final &
  [ NON-HEAD-DTR.SYNSEM.OPT - ].

nom_pronoun-noun-lex := pronoun-noun-lex & no-spr-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ PRON +,
                            CASE nom ] ].

acc_pronoun-noun-lex := pronoun-noun-lex & no-spr-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ PRON +,
                            CASE acc ] ].

loc_noun-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD [ LOC +,
			      CASE nom ],
		   CONT.HOOK.INDEX.PNG.COUNT - ] ].

common_noun-noun-lex := noun-lex &
"""
7/4/2020
added in the COUNT + value in contrast with the newly added mass_noun-noun-lex
"""
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
				       COUNT + ] ].

mass_noun-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
				       NUM singular,
				       COUNT - ] ].

1sg_nom-noun-lex := nom_pronoun-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ PER 1st,
                                         NUM singular ] ] ].

3sg_nom-noun-lex := nom_pronoun-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ PER 3rd,
                                         NUM singular ] ] ].

3pl_nom-noun-lex := nom_pronoun-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ PER 3rd,
					 NUM plural ] ] ].

1pl_nom-noun-lex := nom_pronoun-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ NUM plural,
                                         PER 1st ] ] ].

pronoun-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.PRON + ].

it-noun-lex := pronoun-noun-lex & no-spr-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ NUM singular,
                                         PER 3rd ] ] ].

you-noun-lex := pronoun-noun-lex & no-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 2nd ].

1sg_acc-noun-lex := acc_pronoun-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ NUM singular,
                                         PER 1st ] ] ].

1pl_acc-noun-lex := acc_pronoun-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ NUM plural,
                                         PER 1st ] ] ].

3sg_acc-noun-lex := acc_pronoun-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ NUM singular,
                                         PER 3rd ] ] ].

;;; Verbs

; verb-lex is HC-LIGHT - to allow us to pick out
; 
;   lexical Vs for V-level attachment of negative adverbs.
; 
; All verbs start off as not inverted.

verb-lex := non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT [ HC-LIGHT -,
                       HEAD verb &
                            [ INV - ] ] ].

main-verb-lex := verb-lex & basic-verb-lex & fin-or-nonfin-rule-dtr &
  [ SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.AUX + ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
			      [ LOC - ] ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

;15/4/2020: added in ditransitive for "give"
ditransitive-verb-lex := main-verb-lex & ditransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #objind, #objdir >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #objind &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ],
	      #objdir &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

nom-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ] ].

nom-acc-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ] > ].

;general transitive verb lex added for most verbs which cannot take "there_n" as a subject
gentr_verb-verb-lex := nom-acc-transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD.LOC - ],
	     #object > ].

intransitive_verb-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.FORM form ].

ditransitive_verb-verb-lex := ditransitive-verb-lex &
"""
5/4/2020
added in PRON - for the second complement
to stop sentences like 'he gave the cat him'
"""
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom,
				LOC - ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc,
				PRON - ] ] > ].

clausal-verb-lex := main-verb-lex &
"""
2/4/2020
added in 0-1-list for SPR instead of the empty list
the empty list did not allow for constructions like "i think he cute"
"""
  [ SYNSEM.LOCAL.CAT.VAL.COMPS <  #clause >,
    ARG-ST < [ LOCAL.CAT.HEAD noun &
			      [ LOC - ]],
             #clause &
             [ LOCAL.CAT.VAL [ SPR 0-1-list,
                               COMPS < >,
                               SUBJ < > ] ] > ].

ditr-clausal-verb-lex := main-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS <  #objind, #clause >,
    ARG-ST < [ LOCAL.CAT.HEAD noun &
			      [ LOC - ] ],
	     #objind &
	     [ LOCAL.CAT.HEAD noun ],
             #clause &
             [ LOCAL.CAT.VAL [ SPR 0-1-list,
                               COMPS < >,
                               SUBJ < > ] ] > ].

;;; Auxiliaries

subj-raise-aux := aux-lex & trans-first-arg-raising-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             COMPS < #comps >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun &
                                  [ CASE #case ],
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LOCAL.CAT [ HEAD verb &
                                [ AUX - ],
                           VAL [ COMPS < >,
                                 SPR < >,
                                 SPEC < >,
                                 SUBJ < unexpressed &
                                        [ LOCAL.CAT.HEAD.CASE #case ] > ] ] ] > ].

subj-raise-aux-with-pred := subj-raise-aux & norm-sem-lex-item & trans-first-arg-raising-lex-item-1.

prp_subj-raise-aux-no-pred := subj-raise-aux & trans-first-arg-raising-lex-item-2 &
"""
2/4/2020
added in FORM prp for the copula -ing construction

18/4/2020

"""
    [SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM prp,
    ARG-ST < #subj &
             [ LOCAL.CAT.HEAD.LOC - ],
             #comps > ].

;subj-control-aux := aux-lex & trans-first-arg-control-lex-item &
;  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
;                             SPEC < >,
;                             COMPS < #comps >,
;                             SUBJ < #subj > ],
;                   CONT.HOOK.XARG #xarg ],
;    ARG-ST < #subj &
;             [ LOCAL [ CAT [ HEAD noun &
;                                  [ CASE #case ],
;                             VAL [ SUBJ < >,
;                                   SPR < >,
;                                   SPEC < >,
;                                   COMPS < > ] ],
;                       CONT.HOOK.INDEX #xarg ] ],
;             #comps &
;             [ LOCAL.CAT [ HEAD verb &
;                                [ AUX - ],
;                           VAL [ COMPS < >,
;                                 SPR < >,
;                                 SPEC < >,
;                                 SUBJ < #subj &
;                                        [ LOCAL.CAT.HEAD.CASE #case ] > ] ] ] > ].
;unable to get the link between SUBJ and COMPS in the mrs

does_subj-raise-aux-no-pred := subj-raise-aux & trans-first-arg-raising-lex-item-2 &
"""
added in this type to distinguish 'does' from the 'is -ing'
previously, both 'it does sleep' and 'it does sleeping' were parsed

16/4/2020
added in the aspect value for the COMPS
"""
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CAT.HEAD.FORM base,
		 			     CONT.HOOK.INDEX.E.ASPECT no_aspect ] ].

can-aux-lex := subj-raise-aux-with-pred &
"""
16/4/2020
added in the aspect such that can will not take a COMPS that has been modified by 'already'
"""
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CAT.HEAD.FORM base,
		 			     CONT.HOOK.INDEX.E.ASPECT no_aspect ] ].

will-aux-lex := subj-raise-aux-with-pred &
"""
18/4/2020
introduced this lex since will cannot go with "there_n" while 'can' can.
However, in the case of 'there can...', "there" is not actually the subject
"""
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CAT.HEAD.FORM base,
		 			     CONT.HOOK.INDEX.E.ASPECT no_aspect ],
    ARG-ST < [ LOCAL.CAT.HEAD.LOC - ],
	     #comps > ].

want-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CAT.HEAD.FORM nonfinite,
		 			     CONT.HOOK.INDEX.E.ASPECT no_aspect ],
    ARG-ST < [ LOCAL.CAT.HEAD.LOC - ],
	     #comps > ].


;added for constructions like "I want to sleep."
to-infinitive-lex := trans-first-arg-raising-lex-item-2 & verb-lex &
  [ SYNSEM.LOCAL.CAT [ HEAD.FORM toinf,
		       VAL.COMPS.FIRST.LOCAL.CAT [ HEAD.FORM base,
						   VAL.COMPS < > ] ] ].
;  [ ARG-ST < [ LOCAL.CONT.HOOK.ICONS-KEY.IARG1 #clause &
;					       [ LOCAL.CAT.HEAD.FORM base ]  ],
;	     [ LOCAL.CONT.HOOK.CLAUSE-KEY #clause ] > ].

;;; Copulas

cop-lex := basic-verb-lex-super & trans-first-arg-raising-lex-item-2 & 
 	   non-mod-lex-item & basic-two-arg &
  [ SYNSEM.LOCAL [ CAT.VAL [ SUBJ < [ LOCAL [ CONT.HOOK.INDEX #xarg,
                                              CAT cat-sat &
                                                  [ VAL [ SPR < >,
                                                          COMPS < > ],
                                                    HEAD noun ] ] ] >,
                             COMPS < [ LOCAL.CAT cat-sat &
                                                 [ HEAD.PRD +,
                                                   VAL [ SUBJ < >,
                                                         COMPS < > ] ] ] >,
                             SPR < >,
                             SPEC < > ],
                   CONT.HOOK.XARG #xarg ] ].

; Copula type taking adjectival complements.
; Need to define more for additional complement types.

adj-comp-copula-verb-lex := cop-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD adj ].

be-cop-lex := adj-comp-copula-verb-lex & verb-lex.
;the copula is only used for adjectives and not equating nouns in this grammar

;;; Adjectives

adj-lex := basic-intersective-adjective-lex.

adj1-adj-lex := attr-adj-lex &
"""
14/4/2020
added in '0-dlist' because sentences like 'it is cute' were able to become interrogatives
but it could be a problem with subj-head-phrase instead
"""
  [ SYNSEM.LOCAL.CAT [ POSTHEAD -,
                       VAL.SUBJ < >,
                       HEAD.PRD + ]
;,    SYNSEM.NON-LOCAL.QUE 0-dlist ].
			].

; Basic attributive adjective definition

attr-adj-lex := adj-lex & intersective-mod-lex &
"""
6/4/2020
added PRON - to prevent constructions like 'big he sleep'
"""
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT [ HEAD noun,
					      HEAD.PRON -,
                                              VAL.SPR cons ] ] > ].

pred-adj-lex := adj-lex & basic-one-arg &
"""
2/4/2020
added in this lex type for sentences with the predicative adj to parse
This has an empty MOD list such that '[the cat][cute]' cannot be a Head-mod phrase.

added in VAL.SPR < >, to ensure that the subj has to be an NP
prevent multiple parses for sentences like "he cute"
"""
    [ SYNSEM.LOCAL.CAT.HEAD.MOD < >, 
      SYNSEM.LOCAL.CAT.VAL.SUBJ < [LOCAL [CAT [HEAD noun,
                                               VAL.SPR < > ], 
                                  	  CONT.HOOK.INDEX #ind ] ] >,
      SYNSEM.LKEYS.KEYREL.ARG1 #ind
;,      SYNSEM.NON-LOCAL.QUE 0-dlist 
    ].

;;; Complementizers

; We treat question particles as complementizers.
; Here is the lexical type for complementizers.

complementizer-lex-item := raise-sem-lex-item & basic-one-arg &
"""
3/4/2020
changed the HEAD value of #comps from verb to +vj
to allow for sentences like 'he think that he cute'

14/4/2020
inserted INIT + to ensure the complementizer occurs only at the initial
but removed it to account for the differences between 'is it' and the other complementizers
"""
  [ SYNSEM.LOCAL.CAT [ HEAD comp &
                            [ MOD < > ],
                       VAL [ SPR < >,
                             SUBJ < >,
                             COMPS < #comp > ] ],
    ARG-ST < #comp &
             [ LOCAL.CAT [ HEAD +vj,
                           VAL [ SUBJ < >,
                                 COMPS < > ] ] ] > ].

; Subtype for question particles. Constrains SF to ques.

qpart-lex-item := complementizer-lex-item &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.SF ques,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT [ MC +,
                                                   HEAD.FORM finite ] ] ].

decl_comps-complementizer-lex-item := complementizer-lex-item &
"""
2/4/2020
added this type in for that_comp

7/4/2020
added in SF prop to prevent constructions with "ask that"

14/4/2020
changed 
"""
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.SF prop,
                   CAT [ VAL.COMPS.FIRST.LOCAL.CAT.MC -,
			 HEAD.INIT + ] ] ].

int_comps-complementizer-lex-item := complementizer-lex-item &
"""
7/4/2020
added this type in for ask_comp
to add in the SF question
"""
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.SF ques,
                   CAT [ VAL.COMPS.FIRST.LOCAL.CAT.MC -,
			 HEAD.INIT + ] ] ].

tr_comp-verb-lex := clausal-verb-lex & clausal-second-arg-trans-lex-item &
    [ SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CAT.HEAD comp ] >
    ].

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & norm-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

definite-determiner-lex := determiner-lex & no-icons-lex-item.

plural-determiner-lex := determiner-lex & no-icons-lex-item &
"""
7/4/2020
added in the COUNT + feature
"""
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM plural,
								COUNT + ] ].

singular-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM singular ].

; Type for negative adverbs.
; 
; This adverb should go through a specialized phrase structure rule
;                           included with this grammar.

never_neg-adv-lex := basic-scopal-adverb-lex &
"""
8/4/2020
added in this type to distinguish 'never' from 'not'
this prevents constructions like 'it never cute'
"""
  [ SYNSEM.LOCAL.CAT [ VAL [ SPR < >,
                             COMPS < >,
                             SUBJ < >, 
			     SPEC < >],
		       POSTHEAD -,
                       HEAD.MOD < [ LOCAL.CAT [ HEAD verb &
						   [ AUX - ],
                                                VAL [ SUBJ cons,
                                                      COMPS null ] ] ] > ] ].

not_neg-adv-lex := basic-scopal-adverb-lex &
"""
7/4/2020
created this lexical type for 'not'

8/4/2020
changed it to POSTHEAD + and the HEAD.MOD to be an AUX verb
it is now able to produce the correct mrs for 'it does not hurt me'
but is unable to modify adj

15/4/2020
added in a non-empty comps list in order to prevent 'it does hurt me not'
"""
  [ SYNSEM.LOCAL.CAT [ VAL [ SPR < >,
                             COMPS < >,
                             SUBJ < >, 
			     SPEC < >],
                       POSTHEAD +,
                       HEAD.MOD < [ LOCAL.CAT [ HEAD verb &
						     [AUX + ],
                                                VAL [ SUBJ cons,
						      COMPS < #comps > ] ] ] > ] ].

;considering already to be changed from an adverb to get rid of PRED
aspect-adv-lex := basic-scopal-adverb-lex &
"""
8/4/2020
added in this type for 'already'

13/4/2020
specified the FORM of the modified to be base but the sentence cannot parse after that. To come back to this after sorting out the FORM values

16/4/2020
removed the AUX - to allow for 'he can sleep already' for already to MOD 'can sleep'
added in the empty COMPS in the MOD
"""
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.ASPECT perfective,
		   CAT [ VAL [ SPR < >,
                               COMPS < >,
                               SUBJ < >, 
			       SPEC < >],
;                      POSTHEAD +,
                       HEAD.MOD < [ LOCAL.CAT [ HEAD verb, 
;						     [
;FORM base,
;						      AUX - ],
                                                VAL [ SUBJ cons,
						      COMPS < > ] ] ] > ] ] ].

agak-adv-lex := basic-scopal-adverb-lex &
"""
15/4/2020
created new lex type for the adv agak
added in AUX + to the MOD feature.
"""
  [ SYNSEM.LOCAL.CAT [ VAL [ SPR < >,
                             COMPS < >,
                             SUBJ < >, 
			     SPEC < >],
                       POSTHEAD -,
                       HEAD.MOD < [ LOCAL.CAT [ HEAD verb &
						     [AUX + ],
                                                VAL [ SUBJ cons,
						      COMPS < > ] ] ] > ] ].

very-adv-lex := basic-scopal-adverb-lex &
"""
19/4/2020
created for new lex item
"""
  [ SYNSEM.LOCAL.CAT [ VAL [ SPR < >,
                             COMPS < >,
                             SUBJ < >, 
			     SPEC < >],
                       POSTHEAD -,
                       HEAD.MOD < [ LOCAL.CAT [ HEAD +jr,
						HEAD.MOD #head ] ] > ] ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Intermediate rule types

fin-or-nonfin-rule-dtr := word-or-lexrule.

;;; Lexical rule types

number-lex-rule-super := add-only-no-ccont-rule &
  [ DTR common_noun-noun-lex ].

plural-lex-rule := infl-lex-rule & number-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM plural ].

singular-lex-rule := const-lex-rule & number-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM singular ].

fin-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ DTR fin-or-nonfin-rule-dtr ].


3sg-lex-rule := fin-lex-rule-super &
""" 
19/3/2020 

added in 'HEAD.FORM finite' to the 3sg-lex-rule so that when it is non finite (eg. with Vaux), the verb will not undergo this rule 
""" 
  [ SYNSEM.LOCAL.CAT [HEAD.FORM finite,
                      VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM singular,
                                                                PER 3rd ] ]].

question-lex-rule := add-only-no-ccont-rule &
  [ DTR can-aux-lex,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.SF ques ].

nonfin-lex-rule-super := add-only-no-ccont-rule &
  [ DTR fin-or-nonfin-rule-dtr ].

base-lex-rule := const-lex-rule & nonfin-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.FORM base ].

prp-lex-rule := infl-lex-rule & nonfin-lex-rule-super &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.ASPECT experiential,
                   CAT.HEAD.FORM prp ] ].

; Rule for inverted subject verb order in questions.
; The incompatible SUBJ values on SYNSEM and DTR are
; what keeps this one from spinning.


subj-v-inv-lrule := cat-change-only-lex-rule & same-hc-light-lex-rule & same-posthead-lex-rule & constant-lex-rule &
""" 

19/3/2020 

added in #mod in the HEAD and DTR values to ensure that they have the same MOD value 

probem solved: when the aux is able to modify anything after undergoing the subj-inv 

19/4/2020
added in SF que to allow "she think will the ant sleep" to be stopped

""" 
  [ SYNSEM [ LKEYS #lkeys,
             LOCAL [ CAT [ VAL [ COMPS < #subj . #comps >,
                               SUBJ < >,
                               SPR #spr,
                               SPEC #spec ],
                         MC na,
                         HEAD verb &
                              [ INV +,
				MOD #mod,
                                FORM #form ] ], 
		      CONT.HOOK.INDEX.SF ques ] ],
    DTR.SYNSEM [ LKEYS #lkeys,
                 LOCAL.CAT [ VAL [ SUBJ < #subj >,
                                   COMPS #comps,
                                   SPR #spr,
                                   SPEC #spec ],
                             HEAD verb &
                                  [ AUX +,
				    MOD #mod,
                                    FORM #form ] ] ] ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

; The head of head-comp-phrase can't be: ['comp']

head-comp-phrase := basic-head-1st-comp-phrase & head-initial &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.INIT + ].

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].
;   SYNSEM [ LKEYS #lkeys,
;             LOCAL.CAT [ VAL [ COMPS < #subj . #comps >,
;                               SUBJ < >,	
;                               SPR #spr,
;                               SPEC #spec ],
;                         MC na,
;                         HEAD verb &
;                              [ INV +,
;				MOD #mod,
;                                FORM #form ] ] ],
;    DTR.SYNSEM [ LKEYS #lkeys,
;                 LOCAL.CAT [ VAL [ SUBJ < #subj >,
;                                   COMPS #comps,
;                                   SPR #spr,
;                                   SPEC #spec ],
;                             HEAD verb &
;                                  [ AUX +,
;				    MOD #mod,
;                                    FORM #form ] ] ] ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED exist_q_rel ] !> ].

; comp-head-phrase requires things that are [ HEAD comp ].

comp-head-phrase := basic-head-1st-comp-phrase & head-final &
  [ SYNSEM.LOCAL.CAT.HEAD comp,
    HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.INIT - ].

; This rule takes [MC na] inverted phrases and licensesthem as main clauses with question semantics.
; 

int-cl := interrogative-clause & head-only &
  [ SYNSEM.LOCAL.CAT [ HEAD.INV +,
                       VAL #val,
                       MC + ],
    HEAD-DTR.SYNSEM [ LOCAL.CAT [ MC na,
                                  VAL #val &
                                    [ SUBJ < >,
                                      COMPS < > ] ] ],
    C-CONT.HOOK.INDEX.SF ques ].

;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

;;; Coordination Strategy 1

n1-top-coord-rule := basic-n-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-mid-coord-rule := basic-n-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

np1-top-coord-rule := basic-np-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-mid-coord-rule := basic-np-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

vp1-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

vp1-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

vp1-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

s1-top-coord-rule := basic-s-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

s1-mid-coord-rule := basic-s-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

s1-bottom-coord-rule := conj-first-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 2

n2-top-coord-rule := basic-n-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

n2-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

;;; Coordination Strategy 2

np2-top-coord-rule := basic-np-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

np2-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

;;; Coordination Strategy 2

s2-top-coord-rule := basic-s-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

s2-bottom-coord-rule := conj-first-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

;;; Lexical Items

noun+det-lex-item := norm-hook-lex-item & non-mod-lex-item &
  [ SYNSEM [LOCAL [CAT [ HEAD noun,
			 VAL [ SPR < >,   
   			       COMPS < >,
			       SUBJ < >,
			       SPEC < > ]],
		   CONT [RELS <! relation &
		               [LBL #nh, ARG0 #s ],
			       quant-relation & #det &
			       [ARG0 #s, RSTR #h ]!>,
			HCONS <! qeq & [ HARG #h,
					 LARG #nh ] !> ]],
 	    LKEYS [ KEYREL relation,
		    ALTKEYREL #det ]]].

sg_n+det-lex := noun+det-lex-item &
    [SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM singular ].

pl_n+det-lex := noun+det-lex-item &
    [SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM plural ].

decl_comp-verb-lex := clausal-verb-lex & clausal-second-arg-trans-lex-item &
"""
2/4/2020
this lex type was included for think_clause as it takes a clause as its second argument
the HEAD value of COMPS includes j as Singlish clauses can be headed by adj

6/4/2020
added in the restriction of the case of the SUBJ to make sure it is nom
prevent constructions like 'me think he sleeps'
but it's not working

7/4/2020
added in SF prop to prevent constructions with "think if ..."
"""
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS < [ LOCAL [ CAT.HEAD +vjc,
				     	     CONT.HOOK.INDEX.SF prop ] ] >,
                           SUBJ < [ LOCAL.CAT.HEAD.CASE nom ] > ] ].

int_tr-comp-verb-lex := clausal-verb-lex & clausal-second-arg-trans-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS < [ LOCAL [ CAT.HEAD +vjc,
					     CONT.HOOK.INDEX.SF ques ] ] >,
                           SUBJ < [ LOCAL.CAT.HEAD.CASE nom ] > ] ].

int_ditr-comp-verb-lex := ditr-clausal-verb-lex & clausal-third-arg-ditrans-lex-item &
"""
18/4/2020
Ensure first comps is a bare NP
"""
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS < [ LOCAL.CAT [ HEAD.CASE acc,
						 VAL.SPR < > ] ],
				   [ LOCAL [ CAT.HEAD comp,
					     CONT.HOOK.INDEX.SF ques ] ] >,
                          SUBJ < [ LOCAL.CAT.HEAD.CASE nom ] > ] ].


